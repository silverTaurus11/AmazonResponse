# -*- coding: utf-8 -*-
"""AmazonCellsLabelled.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cpIO5l3CVDwWRmrcbEE_AqKNPlZPqrMo
"""

import tensorflow as tf
print(tf.__version__)

#tujuan : mengkategorian komen positif dan negatif berdasarkan kalimat

import pandas as pd
df = pd.read_csv('amazon_cells_labelled.txt', names=['sentence', 'label'], sep='\t')
df

#membagi data ke training data dan validation data

from sklearn.model_selection import train_test_split
sentence = df['sentence'].values
label = df['label'].values
sentence_train, sentence_test, label_train, label_test = train_test_split(sentence, label, test_size=0.2)

#proses tokonizer

from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
     
tokenizer = Tokenizer(num_words=500, oov_token='x')
tokenizer.fit_on_texts(sentence_train) 
tokenizer.fit_on_texts(sentence_test)
     
sequence_sentence_train = tokenizer.texts_to_sequences(sentence_train)
sequence_sentence_test = tokenizer.texts_to_sequences(sentence_test)
     
padded_sentence_train = pad_sequences(sequence_sentence_train) 
padded_sentence_test = pad_sequences(sequence_sentence_test)

#membuat sistem callback

class myCallback(tf.keras.callbacks.Callback):
    def on_epoch_end(self, epoch, logs={}):
        if(logs.get('accuracy')>0.90):
          print("\nAkurasi telah mencapai > 90%!")
          self.model.stop_training = True
callbacks = myCallback()

#membuat model

import tensorflow as tf
from tensorflow.keras import layers

model = tf.keras.Sequential([
        layers.Embedding(500, 16),
        layers.LSTM(128),
        layers.Dropout(0.2),
        layers.Dense(64, activation='relu'),
        layers.Dropout(0.5),
        layers.Dense(1, activation='sigmoid')
    ])
model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])

model.summary()

num_epochs = 30
history = model.fit(padded_sentence_train, label_train, epochs=num_epochs, validation_data=(padded_sentence_test, label_test), verbose=2, callbacks=[callbacks])

# Commented out IPython magic to ensure Python compatibility.
# visualisasi hasil data training (Plot accuracy & loss model)

import numpy as np
from google.colab import files
from keras.preprocessing import image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
# %matplotlib inline
 

acc = history.history['accuracy']
val_acc = history.history['val_accuracy']

loss = history.history['loss']
val_loss = history.history['val_loss']

plt.plot(acc, label='Training Acc')
plt.plot(val_acc, label='Validation Loss')
plt.title('Model accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train'], loc='lower right')
plt.show()

plt.plot(loss, label='Training Loss')
plt.plot(val_loss, label='Validation Loss')
plt.title('Model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train'], loc='upper right')
plt.show()